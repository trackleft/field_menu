<?php
/**
 * @file
 * Install, update and uninstall functions for field_menu module.
 */
use Drupal\Core\Database\Database;

/**
 * Update all menu field instances with new properties.
 *
 * This affects all existing field_menu implementations on this site.
 */
function field_menu_update_9232() {
  $schema = Database::getConnection()->schema();
  $database = \Drupal::database();

  $all_field_menu_fields = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('field_menu');
  if (!$all_field_menu_fields) {
    return t('No menu fields to update.');
  };

  foreach ($all_field_menu_fields as $entity_type => $field) {
    $field_name = array_key_first($field);

    // New column for menu title.
    $spec_title = [
      'type' => 'text',
      'description' => 'Menu title',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_title', $spec_title);
    // New column for selected menu.
    $spec_menu = [
      'type' => 'text',
      'description' => 'Selected menu',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_menu', $spec_menu);
    // New column for starting level.
    $spec_level = [
      'type' => 'int',
      'description' => 'Starting level',
      'not null' => FALSE,
      'size' => 'small',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_level', $spec_level);
    // New column for depth.
    $spec_depth = [
      'type' => 'int',
      'description' => 'Depth',
      'not null' => FALSE,
      'size' => 'small',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_depth', $spec_depth);
    // New column for expand all items.
    $spec_expand_all_items = [
      'type' => 'int',
      'description' => 'Expand all items',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_expand_all_items', $spec_expand_all_items);
    // New column for follow.
    $spec_follow = [
      'type' => 'int',
      'description' => 'Follow',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_follow', $spec_follow);
    // New column for follow option.
    $spec_follow_parent = [
      'type' => 'text',
      'description' => 'Follow option',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_follow_parent', $spec_follow_parent);
    // New column for fixed parent.
    $spec_parent = [
      'type' => 'text',
      'description' => 'Fixed parent',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_parent', $spec_parent);

    // New column for render_parent.
    $spec_render_parent = [
      'type' => 'int',
      'description' => 'Render parent menu link',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '__' . $field_name, $field_name . '_render_parent', $spec_render_parent);

    // New revision column for menu title.
    $spec_title = [
      'type' => 'text',
      'description' => 'Menu title',
      'not null' => FALSE,
      'size' => 'tiny',
      'default' => 0,
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_title', $spec_title);

    // New revision column for selected menu.
    $spec_menu = [
      'type' => 'text',
      'description' => 'Selected menu',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_menu', $spec_menu);

    // New revision column for starting level.
    $spec_level = [
      'type' => 'int',
      'description' => 'Starting level',
      'not null' => FALSE,
      'size' => 'small',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_level', $spec_level);

    // New revision column for depth.
    $spec_depth = [
      'type' => 'int',
      'description' => 'Depth',
      'not null' => FALSE,
      'size' => 'small',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_depth', $spec_depth);

    // New revision column for expand all items.
    $spec_expand_all_items = [
      'type' => 'int',
      'description' => 'Expand all items',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_expand_all_items', $spec_expand_all_items);
    // New revision column for follow.
    $spec_follow = [
      'type' => 'int',
      'description' => 'Follow',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_follow', $spec_follow);
    // New revision column for follow option.
    $spec_follow_parent = [
      'type' => 'text',
      'description' => 'Follow option',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_follow_parent', $spec_follow_parent);

    // New revision column for fixed parent.
    $spec_parent = [
      'type' => 'text',
      'description' => 'Parent menu link',
      'not null' => FALSE,
      'size' => 'tiny',
      'default' => 0,
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_parent', $spec_parent);

    // New revision column for render_parent.
    $spec_render_parent = [
      'type' => 'int',
      'description' => 'Render parent menu link',
      'not null' => FALSE,
      'size' => 'tiny',
    ];
    $schema->addField($entity_type . '_revision__' . $field_name, $field_name . '_render_parent', $spec_render_parent);

    // Modify field data.
    $field_query = $database->select($entity_type . '__' . $field_name, 'f');
    $field_query->fields('f', [
      'entity_id',
      'revision_id',
      'delta',
      'field_menu_menu_title',
      'field_menu_menu_item_key',
      'field_menu_max_depth',
      'field_menu_include_root',
    ]);


    $current_field_rows = $field_query->execute();
    if (!is_null($field_query)) {
      foreach ($current_field_rows as $row) {
        $menu_levels_array = explode(':', $row->field_menu_menu_item_key);
        $row->field_menu_menu = $menu_levels_array[0];
        $field_update_query = $database->update($entity_type . '__' . $field_name);
        $field_update_query->condition('entity_id', $row->entity_id);
        $field_update_query->condition('revision_id', $row->revision_id);
        $field_update_query->condition('delta', $row->delta);
        $field_update_query->fields([
          'field_menu_title' => $row->field_menu_menu_title,
          'field_menu_menu' => $row->field_menu_menu,
          'field_menu_level' => 1,
          'field_menu_depth' => $row->field_menu_max_depth,
          'field_menu_expand_all_items' => 1,
          'field_menu_follow' => 0,
          'field_menu_follow_parent' => '',
          'field_menu_parent' => $row->field_menu_menu_item_key,
          'field_menu_render_parent' => $row->field_menu_include_root,
        ]);
        $field_update_query->execute();

      }
    }
    // Revisions
    $field_revision_query = $database->select($entity_type . '_revision__' . $field_name, 'fr');
    $field_revision_query->fields('fr', [
      'entity_id',
      'revision_id',
      'delta',
      'field_menu_menu_title',
      'field_menu_menu_item_key',
      'field_menu_max_depth',
      'field_menu_include_root',
    ]);
    $current_field_revision_rows = $field_revision_query->execute();
    if (!is_null($field_revision_query)) {
      foreach ($current_field_revision_rows as $row) {
        $menu_levels_array = explode(':', $row->field_menu_menu_item_key);
        $row->field_menu_menu = $menu_levels_array[0];

        $field_update_query = $database->update($entity_type . '_revision__' . $field_name);
        $field_update_query->condition('entity_id', $row->entity_id);
        $field_update_query->condition('revision_id', $row->revision_id);
        $field_update_query->condition('delta', $row->delta);
        $field_update_query->fields([
          'field_menu_title' => $row->field_menu_menu_title,
          'field_menu_menu' => $row->field_menu_menu,
          'field_menu_level' => 1,
          'field_menu_depth' => $row->field_menu_max_depth,
          'field_menu_expand_all_items' => 1,
          'field_menu_follow' => 0,
          'field_menu_follow_parent' => '',
          'field_menu_parent' => $row->field_menu_menu_item_key,
          'field_menu_render_parent' => $row->field_menu_include_root,
        ]);
        $field_update_query->execute();
      }
      // After transforming all of the data, we can drop the old columns.
      $schema->dropField($entity_type . '__' . $field_name, $field_name . '_menu_item_key');
      $schema->dropField($entity_type . '__' . $field_name, $field_name . '_max_depth');
      $schema->dropField($entity_type . '__' . $field_name, $field_name . '_include_root');
      $schema->dropField($entity_type . '__' . $field_name, $field_name . '_menu_title');
      $schema->dropField($entity_type . '_revision__' . $field_name, $field_name . '_menu_item_key');
      $schema->dropField($entity_type . '_revision__' . $field_name, $field_name . '_max_depth');
      $schema->dropField($entity_type . '_revision__' . $field_name, $field_name . '_include_root');
      $schema->dropField($entity_type . '_revision__' . $field_name, $field_name . '_menu_title');
    }
    // Current node field configurations
    $field_manager = \Drupal::getContainer()->get('entity_field.manager');
    // Because the manager was already loaded before the above config was forced,
    // it will return the old configuration that was cached
    $field_manager->clearCachedFieldDefinitions();
    $field_storage_configs = $field_manager->getFieldStorageDefinitions($entity_type);

    // Get the last installed manager, this is the gatekeeper that determines if
    // an update is needed or can be done
    $last_installed_repo = \Drupal::getContainer()->get('entity.last_installed_schema.repository');

    // Get the last installed configurations for node fields
    // These are iterative objects and need to stored as such, not just simple arrays,
    // so reusing the previously set configs is not an option
    $last_installed_configs = $last_installed_repo->getLastInstalledFieldStorageDefinitions($entity_type);

    // Force the last installed config to be the current for the field
    $last_installed_configs[$field_name] = $field_storage_configs[$field_name];
    $last_installed_repo->setLastInstalledFieldStorageDefinitions($entity_type, $last_installed_configs);
  }
}
